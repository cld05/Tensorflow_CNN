import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
from sklearn.metrics import confusion_matrix
import time
from datetime import timedelta
import math
import os

# Definition of the properties of the CNN layers
# Layer 1
filter_size1 = 5  # filter 5x5 pixels
num_filters1 = 16  # number of filters in the first layer

# Layer 2
filter_size2 = 5  # filter size 5x5 pixels
num_filters2 = 36  # number of filters in the second layer

# Final fully-connected layer
fc_size = 128 * 2

# Define the size of the stride operation
stride = 1

# Data download from MNIST dataset
from tensorflow.examples.tutorials.mnist import input_data
data = input_data.read_data_sets('data/MNIST/', one_hot=True)


def plot_images(images, cls_true, cls_pred=None):
    assert len(images) == len(cls_true) == 9

    # Create figure with 3x3 sub-plots.
    fig, axes = plt.subplots(3, 3)
    fig.subplots_adjust(hspace=0.3, wspace=0.3)

    for i, ax in enumerate(axes.flat):
        # Plot image.
        ax.imshow(images[i].reshape(img_shape), cmap='binary')

        # Show true and predicted classes.
        if cls_pred is None:
            xlabel = "True: {0}".format(cls_true[i])
        else:
            xlabel = "True: {0}, Pred: {1}".format(cls_true[i], cls_pred[i])

        # Show the classes as the label on the x-axis.
        ax.set_xlabel(xlabel)

        # Remove ticks from the plot.
        ax.set_xticks([])
        ax.set_yticks([])

    # Ensure the plot is shown correctly with multiple plots
    # in a single Notebook cell.
    plt.show()


# The dataset above gives one hot encoded labels
# Here we create labels associated to class name
data.test.cls = np.argmax(data.test.labels, axis=1)

# Definition of the size of our data
img_size = 28  # images are 28x28 pixles (1 channel since balck and white)
img_flat_size = img_size * img_size  # Size of flattened image
# tuple to be used when reshaping flattened image in 2-dimensional array
img_shape = (img_size, img_size)
num_channels = 1  # black and white images have only 1 channel
num_cls = 10  # we will calssify handwritten digits from 0 to 9

# GRAPH
# --------------------------------------------------------------
# Definition of funcitons to create random weights and biases


def new_weights(shape):
    return tf.Variable(tf.truncated_normal(shape, stddev=0.05))


def new_biases(length):
    return tf.Variable(tf.constant(0.05, shape=[length]))

# This funciton is used to create new convolutional layer
# Each convolutional layer must take into account the output of the previous one


def leaky_relu(x, alpha):
    return tf.nn.relu(x) - alpha * tf.nn.relu(-x)


def new_conv_layer(input, num_input_channels, filter_size, num_filters, use_pooling=True):

    # Shape of the filter-weights
    # This shape is coherent with what imposed by tensorflow API
    shape = [filter_size, filter_size, num_input_channels, num_filters]

    # The weights for the filter are created here using the function
    # defined above and the variable 'shape' just defined
    weights = new_weights(shape=shape)

    # The biases for the filters are created using the helper funciton
    # created above and the variable 'num_filters'
    biases = new_biases(length=num_filters)

    # We can now create the convolutional layer using the variables defined above
    layer = tf.nn.conv2d(input=input,
                         filter=weights,
                         strides=[1, stride, stride, 1],
                         padding='SAME')
    # Adding the biases to the filters of the layer
    layer += biases

    # if we have chose to use pooling we apply it
    if use_pooling:
        layer = tf.nn.max_pool(value=layer,
                               ksize=[1, 2, 2, 1],
                               strides=[1, stride, stride, 1],
                               padding='SAME')
    layer = leaky_relu(layer, alpha=0.2)

    return layer, weights

# The output of the convolutional layers is 4-dimensional
# we need to reduce it to a 2-dimensional one


def flatten_layer(layer):
    layer_shape = layer.get_shape()
    num_features = layer_shape[1:4].num_elements()
    layer_flat = tf.reshape(layer, [-1, num_features])

    return layer_flat, num_features


def new_fc_layer(input,
                 num_inputs,
                 num_outputs,
                 use_relu=True):
    weights = new_weights(shape=[num_inputs, num_outputs])
    biases = new_biases(length=num_outputs)

    layer = tf.matmul(input, weights) + biases

    if use_relu:
        layer = leaky_relu(layer, alpha=0.2)

    return layer


# Create place holder variables
# variable for the fully connected layer
x = tf.placeholder(tf.float32, shape=[None, img_flat_size], name='x')
# variable for the convolutional layers
x_img = tf.reshape(x, [-1, img_size, img_size, num_channels])
# variable for true values of the MNIST data
y_true = tf.placeholder(tf.float32, shape=[None, 10], name='y_true')
y_true_cls = tf.argmax(y_true, dimension=1)

# We can now create the convolutional layers
conv1, weights_conv1 = new_conv_layer(input=x_img,
                                      num_input_channels=num_channels,
                                      filter_size=filter_size1,
                                      num_filters=num_filters1,
                                      use_pooling=True)
print(conv1)

conv2, weights_conv2 = new_conv_layer(input=conv1,
                                      num_input_channels=num_filters1,
                                      filter_size=filter_size2,
                                      num_filters=num_filters2,
                                      use_pooling=True)
print(conv2)

# The convolutional layer above need to be connected to the fulluy connected
# layer but the output of layer 2 must be reshaped
layer_flat, num_features = flatten_layer(conv2)
print(layer_flat, num_features)

# Create the first fully connected layer
fc1 = new_fc_layer(input=layer_flat,
                   num_inputs=num_features,
                   num_outputs=fc_size,
                   use_relu=True)
print(fc1)

fc_size_cld = 64 * 2
fc_size_cld2 = 64
# Create the first fully connected layer
fc1_cld = new_fc_layer(input=fc1,
                       num_inputs=fc_size,
                       num_outputs=fc_size_cld,
                       use_relu=True)
print(fc1)

fc2_cld = new_fc_layer(input=fc1_cld,
                       num_inputs=fc_size_cld,
                       num_outputs=fc_size_cld2,
                       use_relu=True)

# Create the second fully connected layer
# The output of this one gives the 10 classes yet to be "normalized" (softmax)
fc2 = new_fc_layer(input=fc2_cld,
                   num_inputs=fc_size_cld2,
                   num_outputs=num_cls,
                   use_relu=False)
print(fc2)
dropout = tf.layers.dropout(inputs=fc2, rate=0.4)
# Apply softmax to the output of the fully-connected layer such that the output
# is in form of probability
y_pred = tf.nn.softmax(fc2)
# Transform the prediction from one_hot encoded to class form
y_pred_cls = tf.argmax(y_pred, dimension=1)

# Create the cost function to be optimized
cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=fc2, labels=y_true)
cost = tf.reduce_mean(cross_entropy)
# Create the optimizer in order to calculate the right parameter for the NN
optimizer = tf.train.AdamOptimizer(learning_rate=0.0004).minimize(cost)

# Calculate the accuracy of the algorithm
correct_prediction = tf.equal(y_pred_cls, y_true_cls)
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
# --------------------------------------------------------------
# SESSION
session = tf.Session()
session.run(tf.global_variables_initializer())

# Definition of the train batch
train_batch_size = 64  # number of images to be fed at each iteratioin in the optimizer

total_iterations = 0

# Helper function to perform the optimiziation iterations


def optimize(num_iterations):

    global total_iterations  # update global variable

    start_time = time.time()  # initial time, stored for priting purposes

    for i in range(total_iterations, total_iterations + num_iterations):
        # Get a batch of the training data and corresponsing labels
        x_batch, y_true_batch = data.train.next_batch(train_batch_size)

        # Create a feed dictionary
        feed_dict_train = {x: x_batch,
                           y_true: y_true_batch}

        # run the optimizier in the sessionself
        # tensorflow uses the dictionarycreated above in order to feed
        # the data into place data into the placeholders
        session.run(optimizer, feed_dict=feed_dict_train)

        # Print status messages
        if i % 100 == 0:
            # print accuracy
            acc = session.run(accuracy, feed_dict=feed_dict_train)

            msg = "Optimization Iteration: {0:>6}, training Accuracy {1:>6.1%}"

            print(msg.format(i + 1, acc))

    # Update total number of iterations
    total_iterations += num_iterations

    # End time
    end_time = time.time()

    # Total time
    time_diff = end_time - start_time

    print("Time usage:" + str(timedelta(seconds=int(round(time_diff)))))


def plot_example_errors(cls_pred, correct):
    # This function is called from print_test_accuracy() below.

    # cls_pred is an array of the predicted class-number for
    # all images in the test-set.

    # correct is a boolean array whether the predicted class
    # is equal to the true class for each image in the test-set.

    # Negate the boolean array.
    incorrect = (correct == False)

    # Get the images from the test-set that have been
    # incorrectly classified.
    images = data.test.images[incorrect]

    # Get the predicted classes for those images.
    cls_pred = cls_pred[incorrect]

    # Get the true classes for those images.
    cls_true = data.test.cls[incorrect]

    # Plot the first 9 images.
    plot_images(images=images[0:9],
                cls_true=cls_true[0:9],
                cls_pred=cls_pred[0:9])


def plot_confusion_matrix(cls_pred):
    # This is called from print_test_accuracy() below.

    # cls_pred is an array of the predicted class-number for
    # all images in the test-set.

    # Get the true classifications for the test-set.
    cls_true = data.test.cls

    # Get the confusion matrix using sklearn.
    cm = confusion_matrix(y_true=cls_true,
                          y_pred=cls_pred)

    # Print the confusion matrix as text.
    print(cm)

    # Plot the confusion matrix as an image.
    plt.matshow(cm)

    # Make various adjustments to the plot.
    plt.colorbar()
    tick_marks = np.arange(num_classes)
    plt.xticks(tick_marks, range(num_classes))
    plt.yticks(tick_marks, range(num_classes))
    plt.xlabel('Predicted')
    plt.ylabel('True')

    # Ensure the plot is shown correctly with multiple plots
    # in a single Notebook cell.
    plt.show()


# Split the test-set into smaller batches of this size.
test_batch_size = 256


def print_test_accuracy(show_example_errors=False,
                        show_confusion_matrix=False):

    # Number of images in the test-set.
    num_test = len(data.test.images)

    # Allocate an array for the predicted classes which
    # will be calculated in batches and filled into this array.
    cls_pred = np.zeros(shape=num_test, dtype=np.int)

    # Now calculate the predicted classes for the batches.
    # We will just iterate through all the batches.
    # There might be a more clever and Pythonic way of doing this.

    # The starting index for the next batch is denoted i.
    i = 0

    while i < num_test:
        # The ending index for the next batch is denoted j.
        j = min(i + test_batch_size, num_test)

        # Get the images from the test-set between index i and j.
        images = data.test.images[i:j, :]

        # Get the associated labels.
        labels = data.test.labels[i:j, :]

        # Create a feed-dict with these images and labels.
        feed_dict = {x: images,
                     y_true: labels}

        # Calculate the predicted class using TensorFlow.
        cls_pred[i:j] = session.run(y_pred_cls, feed_dict=feed_dict)

        # Set the start-index for the next batch to the
        # end-index of the current batch.
        i = j

    # Convenience variable for the true class-numbers of the test-set.
    cls_true = data.test.cls

    # Create a boolean array whether each image is correctly classified.
    correct = (cls_true == cls_pred)

    # Calculate the number of correctly classified images.
    # When summing a boolean array, False means 0 and True means 1.
    correct_sum = correct.sum()

    # Classification accuracy is the number of correctly classified
    # images divided by the total number of images in the test-set.
    acc = float(correct_sum) / num_test

    # Print the accuracy.
    msg = "Accuracy on Test-Set: {0:.1%} ({1} / {2})"
    print(msg.format(acc, correct_sum, num_test))

    # Plot some examples of mis-classifications, if desired.
    if show_example_errors:
        print("Example errors:")
        plot_example_errors(cls_pred=cls_pred, correct=correct)

    # Plot the confusion matrix, if desired.
    if show_confusion_matrix:
        print("Confusion Matrix:")
        plot_confusion_matrix(cls_pred=cls_pred)


def plot_conv_weights(weights, input_channel=0):
    # Assume weights are TensorFlow ops for 4-dim variables
    # e.g. weights_conv1 or weights_conv2.

    # Retrieve the values of the weight-variables from TensorFlow.
    # A feed-dict is not necessary because nothing is calculated.
    w = session.run(weights)

    # Get the lowest and highest values for the weights.
    # This is used to correct the colour intensity across
    # the images so they can be compared with each other.
    w_min = np.min(w)
    w_max = np.max(w)

    # Number of filters used in the conv. layer.
    num_filters = w.shape[3]

    # Number of grids to plot.
    # Rounded-up, square-root of the number of filters.
    num_grids = math.ceil(math.sqrt(num_filters))

    # Create figure with a grid of sub-plots.
    fig, axes = plt.subplots(num_grids, num_grids)

    # Plot all the filter-weights.
    for i, ax in enumerate(axes.flat):
        # Only plot the valid filter-weights.
        if i < num_filters:
            # Get the weights for the i'th filter of the input channel.
            # See new_conv_layer() for details on the format
            # of this 4-dim tensor.
            img = w[:, :, input_channel, i]

            # Plot image.
            ax.imshow(img, vmin=w_min, vmax=w_max,
                      interpolation='nearest', cmap='seismic')

        # Remove ticks from the plot.
        ax.set_xticks([])
        ax.set_yticks([])

    # Ensure the plot is shown correctly with multiple plots
    # in a single Notebook cell.
    plt.show()


optimize(num_iterations=500)
print_test_accuracy(show_example_errors=True)
# plot_conv_weights(weights=weights_conv1)
